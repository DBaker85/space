import { outputFile } from "fs-extra";
import { resolve } from "path";
// import { render } from "node-sass";
// import * as postcss from "postcss";
// import * as autoprefixer from "autoprefixer";
import chalk from "chalk";
import * as sassExtract from "sass-extract";
// import { render } from "node-sass";
import { hyphenToCamel } from "./utils/tools";

let constants = {
  colors: {}
};

const constantsTemplate = constants => `
  // This file is autogenerated do not modify manually
  export const constants = ${JSON.stringify(constants)}
`;

const variableFileOut = resolve(
  __dirname,
  "..",
  "src",
  "shared",
  "constants.ts"
);
const CompileColors = () => {
  console.log(`${chalk.gray(
    "---"
  )} Generating JS friendly CSS colors ${chalk.gray("---")}
  `);
  const indexFile = resolve(__dirname, "..", "src", "scss", "_variables.scss");

  sassExtract
    .render({
      file: indexFile
    })
    .then(
      rendered => {
        Object.keys(rendered.vars).forEach(variableType => {
          Object.keys(rendered.vars[variableType]).forEach(variable => {
            if (rendered.vars[variableType][variable].value.hex !== undefined) {
              Object.assign(constants.colors, {
                [hyphenToCamel(variable.replace("$", ""))]: rendered.vars[
                  variableType
                ][variable].value.hex
              });
            }
          });
        });

        outputFile(variableFileOut, constantsTemplate(constants)).then(
          () => {
            console.log(
              `✔️  Color variables written to ${chalk.green("constants.ts")}`
            );
          },
          err => {
            console.log(
              `❌  ${chalk.red("Error")} writing css variables: ${err}`
            );
          }
        );
      },
      rejected => {
        console.log(`❌  ${chalk.red("Error")} reading ${chalk.green(
          "_variables.scss"
        )}
      ${rejected}
      `);
      }
    );
};

CompileColors();

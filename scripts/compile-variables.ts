import { outputFile } from 'fs-extra';
import { resolve } from 'path';
import { gray, green, red } from 'chalk';
import * as sassExtract from 'sass-extract';
import { format, resolveConfig } from 'prettier';

import { hyphenToCamel, RGBToHSL } from './utils/tools';

import { json2ts } from 'json-ts';

let constants = {
  colors: {},
  planetColors: [],
};

const jsonParser = (items) => {
  let state = ``;
  Object.keys(items).forEach((item, index, array) => {
    if (!Array.isArray(items[item])) {
      let subitems = ``;
      Object.keys(items[item]).forEach((subitem, index, array) => {
        subitems =
          subitems +
          `${subitem}:'${items[item][subitem]}'${
            index + 1 < array.length ? ',' : ''
          }`;
      });

      state =
        state + `${item}:{${subitems}}${index + 1 < array.length ? ',' : ''}`;
    }
    if (Array.isArray(items[item])) {
      let subArray = ``;
      Object.keys(items[item]).forEach((subitem, index, array) => {
        subArray =
          subArray +
          `'${items[item][subitem]}'${index + 1 < array.length ? ',' : ''}`;
      });
      state = state + `${item}:[${subArray}]`;
    }
  });
  return state;
};

const constantsTemplate = (constants) => `
  /**
   * This file is autogenerated from the sass variables.
   * Do not modify manually.
   */

  ${json2ts(JSON.stringify(constants), {
    rootName: 'CssConstants',
    prefix: '',
  })}

  export const cssConstants:CssConstants = {${jsonParser(constants)}};
  `;

const variableFileOut = resolve(
  __dirname,
  '..',
  'src',
  'shared',
  'css-constants.ts'
);
const CompileColors = () => {
  console.log('');
  console.log(`${gray('---')} Generating JS friendly CSS colors ${gray('---')}
  `);
  const indexFile = resolve(
    __dirname,
    '..',
    'src',
    'scss',
    'variables',
    '_base-colors.scss'
  );

  sassExtract
    .render({
      file: indexFile,
    })
    .then(
      (rendered) => {
        Object.keys(rendered.vars).forEach((variableType) => {
          Object.keys(rendered.vars[variableType]).forEach((variable) => {
            // filter out colors
            if (
              rendered.vars[variableType][variable].value.hex !== undefined &&
              !variable.includes('-space-')
            ) {
              const values = rendered.vars[variableType][variable].value;
              Object.assign(constants.colors, {
                [hyphenToCamel(variable.replace('$', ''))]: RGBToHSL(
                  values.r,
                  values.g,
                  values.b
                ),
              });
            }
            if (
              rendered.vars[variableType][variable].value.hex !== undefined &&
              variable.includes('-space-')
            ) {
              const values = rendered.vars[variableType][variable].value;
              constants.planetColors.push(
                RGBToHSL(values.r, values.g, values.b)
              );
            }
          });
        });
        resolveConfig(resolve(__dirname, '..')).then(
          (options) => {
            outputFile(
              variableFileOut,
              format(constantsTemplate(constants), {
                ...options,
                parser: 'typescript',
              }),
              'utf8'
            ).then(
              () => {
                console.log(
                  `✔️  Variables written to ${green('css-constants.ts')}
              `
                );
              },
              (err) => {
                console.log(
                  `❌  ${red('Error')} writing css variables: ${err}`
                );
              }
            );
          },
          (err) => {
            console.log(
              `❌  ${red('Error')} resolving prettier config: ${err}`
            );
          }
        );
      },
      (rejected) => {
        console.log(`❌  ${red('Error')} reading ${green('_variables.scss')}
      ${rejected}
      `);
      }
    );
};

CompileColors();

import { outputFile, readFile } from 'fs-extra';
import { resolve } from 'path';
import { green, red, gray } from 'chalk';
import { format, resolveConfig } from 'prettier';

import { hyphenToCamel } from './utils/tools';

import { json2ts } from 'json-ts';

const vars = {
  colors: {},
  planetColors: [],
};

const indexFile = resolve(
  __dirname,
  '..',
  'src',
  'scss',
  'variables',
  '_base-colors.scss'
);

const jsonParser = (items) => {
  let state = ``;
  Object.keys(items).forEach((item, index, array) => {
    if (!Array.isArray(items[item])) {
      let subitems = ``;
      Object.keys(items[item]).forEach((subitem, index, array) => {
        subitems =
          subitems +
          `${subitem}:'${items[item][subitem]}'${
            index + 1 < array.length ? ',' : ''
          }`;
      });

      state =
        state + `${item}:{${subitems}}${index + 1 < array.length ? ',' : ''}`;
    }
    if (Array.isArray(items[item])) {
      let subArray = ``;
      Object.keys(items[item]).forEach((subitem, index, array) => {
        subArray =
          subArray +
          `'${items[item][subitem]}'${index + 1 < array.length ? ',' : ''}`;
      });
      state = state + `${item}:[${subArray}]`;
    }
  });
  return state;
};

const constantsTemplate = (constants) => `
  /**
   * This file is autogenerated from the sass variables.
   * Do not modify manually.
   */

  ${json2ts(JSON.stringify(constants), {
    rootName: 'CssConstants',
    prefix: '',
  })}

  export const cssConstants:CssConstants = {${jsonParser(constants)}};
  `;

const variableFileOut = resolve(
  __dirname,
  '..',
  'src',
  'shared',
  'css-constants.ts'
);

const Generate = async () => {
  console.log('');
  console.log(`${gray('---')} Generating JS friendly CSS colors ${gray('---')}
  `);

  try {
    const file = await readFile(indexFile);
    const variables = file
      .toString()
      .match(/(^\$.+;)/gm)
      .map((variable) =>
        variable.replace(/;/g, '').replace(/\$/g, '').split(': ')
      );
    variables
      .filter((variable) => !variable[0].includes('-space-'))
      .forEach((variable) => {
        vars.colors[hyphenToCamel(variable[0])] = variable[1];
      });
    variables
      .filter((variable) => variable[0].includes('-space-'))
      .forEach((variable) => {
        vars.planetColors.push(
          vars.colors[hyphenToCamel(variable[1])]
            ? vars.colors[hyphenToCamel(variable[1])]
            : variable[1]
        );
      });
    const prettierOptions = await resolveConfig(resolve(__dirname, '..'));
    await outputFile(
      variableFileOut,
      format(constantsTemplate(vars), {
        ...prettierOptions,
        parser: 'typescript',
      }),
      'utf8'
    );
    console.log(
      `✔️  Variables written to ${green('css-constants.ts')}
    `
    );
  } catch (err) {
    console.log(`❌  ${red('Error')} writing css variables: ${err}`);
  }
};

Generate();
